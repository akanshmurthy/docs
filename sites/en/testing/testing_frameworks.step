message <<-MARKDOWN
# What's a testing framework?
A Testing framework is an execution environment for automated tests. Think of it as the set of assumptions that reminds you when you veer away from those assumptions. In short Test frameworks helps teams organize their test suites and in turn
help improve the efficiency of testing. 

# Types of testing frameworks
There are many testing frameworks that work great.  Mini Test is the default testing framework in Rails 5. However, we will be using the RSpec testing framework instead.   


# RSpec
## How to set up RSpec in Rails

Add rspec-rails to both the :development and :test groups in the Gemfile:

<div class="console"><pre>
group :development, :test do
  gem 'rspec-rails', '~> 3.4'
end</pre>
</div>

Download and install by running:

<div class="console"><pre>
bundle install
</pre>
</div>

Initialize the spec/ directory (where specs will reside) with:

<div class="console"><pre>
rails generate rspec:install
</pre>
</div>

This adds the following files which are used for configuration:

<div class="console"><pre>
.rspec
spec/spec_helper.rb
spec/rails_helper.rb
</pre>
</div>

Use the rspec command to run your specs:

<div class="console"><pre>
bundle exec rspec
</pre>
</div>

By default the above will run all spec files in the spec directory. 

To run only a subset of these specs use the following command:

<div class="console"><pre>
# Run only a specific folder name
bundle exec rspec spec/folder_name

# Run only specs for a specific type of test such as the post controller
bundle exec rspec spec/controllers/post_controller_spec.rb
</pre>
</div>

## RSpec Basics

<div class="console"><pre>
1 RSpec.describe Tree do
2  it "is able to age by 1 year increments" do
3    orange_tree = Tree.new
4    orange_tree.age   
5   expect(orange_tree.age).to eq(1)
6  end
7 end
</pre>
</div>

The 'describe' and 'it' methods come from rspec-core. The Tree class would be from your code. You can think of 'describe' as a header to describe which class you are testing and 'it' as a string/subheader that states what specifically you are testing in the Tree class.

The last line of the example expresses an expected outcome. If orange_tree.age == 1, then the example passes. If not, it fails with a message like:

<div class="console">
<pre>
expected: #< Tree @age=1 >
     got: #< Tree @age=0 >
</pre>
</div>

## Matchers
Remember in our example on line 5? 'to eq' is a matcher. RSpec has many built-in matchers. Matchers evaluates our expectations. In our example, we are saying that we expect orange_tree's age to equal an integer of 1.

Check out the other built-in matchers!
https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers


MARKDOWN

next_step "types_of_tests"
